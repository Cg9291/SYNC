//THIS CODE IS AN EXERCISE ON OOP CONCEPTS USING ELEMENTS OF THE MOVIE 'THE MATRIX'

//obj constructor fn
function profiles(ID,gender,firstName,lastName,potential){
    this.ID=ID,
    this.gender=gender,
    this.firstName=firstName,
    this.lastName=lastName,
    this.potential=potential
    }
  
  let myRegex=/^[a-z]/i;
  
  
  
  //proto bio(to make sure all profiles have a flexible bio)
  profiles.prototype.bio=function(){return this.gender='M'?`Employee number ${this.ID} belongs to Mr. ${this.firstName +" "+ this.lastName},he is of potential class ${this.potential} and is currently located in ${this.city()}.`
  :`Employee number ${this.ID} belongs to Mrs. ${this.firstName +" "+ this.lastName},she is of potential class ${this.potential} and is currently located in ${this.city()}.`}
  //proto city(to assign city based on ID..aka all obj with a certain ID would share a certain city (4 options))
  profiles.prototype.city=function(){return this.ID[0]==0?'Zion'
                                     :this.ID[0]==1?'The Matrix'
                                     :myRegex.test(this.ID)?'Cannot be found in any city,must be Architect or Oracle'
                                     :'Impossible!';}
  
  //mixin (for assignment of abilities after object creation)
  let abilities=(function(){//var assigned IIFE..abilities is an object
   return {combatMixin:function(obj,...abs){//IIFE that return an obj with method key (combatMixin) and method value(fn that pushes abilities to the abilities array of an obj)
     obj.abilities=[]
     obj.abilities.push(...abs);//summary:abilities is an object with property/method that creates an abilities array to obj and pushes abilities there.
   },
          skinMixin:function(...obj){
            for(let el in [...obj]){
              [...obj][el].skin="black";
          }}
  }})();

  //Display of city based on prototype 
  let callprop=(...objs)=>{
    for(let i=0;i<objs.length;i++){
      console.log(objs[i].city());
    }if(i=objs.length-1){return ''};
    }
  
  //end of setup above
  //objects creation
  let neo=new profiles('006','M','Neo','Anderson','S')
  let trinity=new profiles('002','F','Trinity','unknown','B')
  let morpheus=new profiles('001','M','Morpheus','unknown','A')
  let smith=new profiles('100','M','Agent','Smith','S')
  let mero=new profiles('110','M','The','Merovingian','C')
  let oracle=new profiles('OXX','F','The','Oracle','XX')
  let architect=new profiles('AXY','M','The','Architect','XY')
  let niobe=new profiles('009','F','Jada-Niobe','Alsina','D')
  let cg= new profiles('666','M','CG','unknown','unknown')
  
  let cast=[neo,trinity,morpheus,smith,mero,oracle,architect,niobe]
  /*console.log(cast)*/
  
  //assigning objects(regardless of relation) with new properties thru mixin
  abilities.combatMixin(neo,'combat','flight','revival','immortality','time manipulation','being the one')
  abilities.combatMixin(trinity,'combat')
  abilities.combatMixin(morpheus,'combat','intuition','leadership')
  abilities.combatMixin(smith,'combat','body takeover','self cloning','quasi-omniscience','revival','immortality')
  abilities.combatMixin(mero,'manipulation','rich')
  abilities.combatMixin(oracle,'clairvoyance')
  abilities.combatMixin(architect,'design')
  abilities.combatMixin(niobe,"disloyalty")
  abilities.combatMixin(cg,'ultimate')
  callprop();

  abilities.skinMixin(cg);
  abilities.skinMixin(morpheus,oracle,niobe);
  let castB={morpheus,oracle,niobe,cg};


 
  niobe.abilities[0]='entanglements';

  console.log(niobe.abilities[0])
  

  
  


    


